digraph "CFG for 'test2' function" {
	label="CFG for 'test2' function";

	Node0x600003ed5280 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{entry:\l  %a = alloca i32, align 4\l  %b = alloca i32, align 4\l  %c = alloca i32, align 4\l  %d = alloca i32, align 4\l  %e = alloca i32, align 4\l  %f = alloca i32, align 4\l  %i = alloca i32, align 4\l  store i32 5, i32* %a, align 4\l  store i32 4, i32* %b, align 4\l  store i32 0, i32* %i, align 4\l  br label %for.cond\l}"];
	Node0x600003ed5280 -> Node0x600003ed52c0;
	Node0x600003ed52c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{for.cond:                                         \l  %0 = load i32, i32* %i, align 4\l  %cmp = icmp slt i32 %0, 10\l  br i1 %cmp, label %for.body, label %for.end\l|{<s0>T|<s1>F}}"];
	Node0x600003ed52c0:s0 -> Node0x600003ed5300;
	Node0x600003ed52c0:s1 -> Node0x600003ed5340;
	Node0x600003ed5300 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{for.body:                                         \l  %1 = load i32, i32* %a, align 4\l  %2 = load i32, i32* %d, align 4\l  %add = add nsw i32 %1, %2\l  store i32 %add, i32* %c, align 4\l  %3 = load i32, i32* %c, align 4\l  %4 = load i32, i32* %a, align 4\l  %mul = mul nsw i32 %3, %4\l  store i32 %mul, i32* %e, align 4\l  br label %for.inc\l}"];
	Node0x600003ed5300 -> Node0x600003ed53c0;
	Node0x600003ed53c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{for.inc:                                          \l  %5 = load i32, i32* %i, align 4\l  %inc = add nsw i32 %5, 1\l  store i32 %inc, i32* %i, align 4\l  br label %for.cond, !llvm.loop !5\l}"];
	Node0x600003ed53c0 -> Node0x600003ed52c0;
	Node0x600003ed5340 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{for.end:                                          \l  %6 = load i32, i32* %e, align 4\l  %7 = load i32, i32* %d, align 4\l  %cmp1 = icmp sgt i32 %6, %7\l  br i1 %cmp1, label %if.then, label %if.else\l|{<s0>T|<s1>F}}"];
	Node0x600003ed5340:s0 -> Node0x600003ed5440;
	Node0x600003ed5340:s1 -> Node0x600003ed5480;
	Node0x600003ed5440 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{if.then:                                          \l  %8 = load i32, i32* %d, align 4\l  %9 = load i32, i32* %c, align 4\l  %mul2 = mul nsw i32 %8, %9\l  store i32 %mul2, i32* %f, align 4\l  br label %if.end\l}"];
	Node0x600003ed5440 -> Node0x600003ed5380;
	Node0x600003ed5480 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{if.else:                                          \l  %10 = load i32, i32* %e, align 4\l  %11 = load i32, i32* %b, align 4\l  %div = sdiv i32 %10, %11\l  store i32 %div, i32* %e, align 4\l  br label %if.end\l}"];
	Node0x600003ed5480 -> Node0x600003ed5380;
	Node0x600003ed5380 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{if.end:                                           \l  ret void\l}"];
}
